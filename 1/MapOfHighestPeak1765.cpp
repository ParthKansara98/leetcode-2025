#include <iostream>
#include <vector>
#include <deque>

using namespace std;

void print2DVectorInt(vector<vector<int>>);
void printQueue(deque<pair <int, int>>);

vector<vector<int>> highestPeak(vector<vector<int>> isWater) {
    deque<pair <int, int>> queue;
    int index = 0, row = isWater.size(), col = isWater[0].size();
    vector<vector<int>> height(row, vector<int> (col, -1));
    vector<pair<int, int>> directions = {{0,-1},{-1,0},{0,1},{1,0}};
    
    for (int i = 0; i < row; i++) {
        for (int j = 0; j < col; j++) {
            if (isWater[i][j] == 1) {
                queue.push_back({i,j});
                height[i][j] = index;
            }
        }
    }

    while (!queue.empty()) {
        for (int i = 0; i < queue.size(); i++) {
            pair<int, int> element = queue.front();
            int f = element.first, s = element.second;
            queue.pop_front();

            for (pair<int, int> direction:directions) {
                int r = f + direction.first;
                int c = s + direction.second;

                if (r >= 0 && c >= 0 && r < row && c < col && height[r][c] == -1) {
                    height[r][c] = height[f][s] + 1;
                    queue.push_back({r,c});
                }
            }
        }
        index++;
    }
    return height;
}

void printQueue(deque<pair <int, int>> q) {
    for (auto element:q) {
        cout << "element.first " << element.first << " element.second " << element.second << endl;
    }
}

void print2DVectorInt(vector<vector<int>> vector2D) {
    for (auto row:vector2D) {
        for (int col:row) {
            cout << col << " ";
        }
        cout << endl;
    }
}

int main() {
    print2DVectorInt(highestPeak(vector<vector<int>> {{0,1},{0,0}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{0,1,0},{1,0,0},{0,0,0}}));
    cout << "----------------------------";
    print2DVectorInt(highestPeak(vector<vector<int>> {{1}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{1},{0}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{0},{0},{0},{0},{1},{0},{0},{1},{1}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{1,1,1,1,0},{1,1,1,1,1},{1,1,1,0,1},{1,1,1,1,0},{1,1,1,1,1},{1,1,1,1,1}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,0}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{0,0,0,1,0},{1,1,0,0,0},{1,1,1,1,0},{1,1,0,0,1},{1,1,0,0,1},{1,1,0,1,0},{0,1,0,0,0},{1,1,1,0,0},{0,1,1,1,1},{1,1,1,1,0},{0,0,1,1,0},{0,1,1,1,1},{0,0,1,0,0},{0,1,1,1,1},{0,0,0,1,1},{0,1,1,1,0}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{1,0,1,1,0,1,1,0,0,0},{0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,1,1,0,0},{0,0,0,0,0,1,0,0,0,0},{1,0,0,0,0,0,0,1,0,0},{0,0,1,0,1,0,0,0,1,0},{1,0,0,1,0,0,0,0,0,1},{0,1,0,0,0,0,0,0,0,0},{0,1,1,0,1,1,0,1,1,0},{0,0,0,1,1,0,1,0,1,0},{1,0,1,0,1,0,0,1,0,0},{0,0,0,1,0,0,0,0,0,0},{0,1,1,1,0,1,0,0,0,0},{0,0,1,0,1,1,0,0,0,1},{0,0,1,1,1,1,1,0,0,0},{0,1,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,0,0}}));
    print2DVectorInt(highestPeak(vector<vector<int>> {{0,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0},{0,1,0,1,1,1,0,1,1,0,0,0,0,0,1,0,1,1,0,0,1,1,0,0,1,1,1,0,0,0,0,1,0,0,1,0,1,1,1,0,1,0,0,0,0,0,1,1,0,1},{1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,1,1,1,0,0,0,1,0,1,1,1,1,0,0,1,1,0,1,1},{1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,1,0,1,0},{1,0,1,0,1,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,0,1,1,0,1,1,0,1,1,0,0,1,1,0,0,0,1,0,1,0,0,0,1,1,1,1,0,1,0},{0,1,0,1,1,1,1,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,1,1,0,0,1,0,1,1,1,0,0,0,0,0,1,1,1,0,0,0,1},{1,1,1,1,1,0,1,1,1,0,1,1,0,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,0,1,0,1,0,1,0,1,0},{1,1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,1,1,1,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,0,1,1,0,1,1,1,1},{1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,1,0,1,0,1,1,1,1,0,0,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,0},{1,1,0,1,1,0,1,1,0,0,0,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,1,0,0,1,1},{0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,0,1,1,0,0,0,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0,1},{1,1,0,0,0,1,1,1,0,0,0,1,1,1,1,1,1,0,0,1,0,1,1,0,0,0,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,0,1,0,0,1,0,1,1},{0,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,1,0,0,1,1,1,1,1,1,1,1,1,0,1},{1,1,0,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,0},{0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0},{0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1},{0,1,0,1,1,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0,1,1,1},{0,0,0,0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,0,0,0,0,0,1,1,0,1,0,1,1,1,1,1,0,0,0,0},{0,0,0,1,0,1,1,0,0,1,1,1,0,0,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,1,1,1,0,0,1,1,1,1},{0,1,1,1,0,1,0,0,1,0,0,0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,0,0,0,1,0,0,0,0,0},{0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,1,0,0,0,1,1,1,0,1,1,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0},{0,0,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,0,1,1,0,1,0,1,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0},{0,1,0,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,1,1,1,0},{1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,1,0,0,0,0,1,1,1,1,0,0,1,0,1,1,1,1,0,1,1,1,1},{1,0,0,0,0,0,1,1,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,1,1,0,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0},{1,1,1,1,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,1,0,0,1,1,1,1,1,1,1,1,0,1},{0,1,0,0,0,0,1,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,1,0,1,1,1,1,0,1,1,0,0,0,1,0,0,1},{0,1,0,1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,0,1,0,0,0,0,1,1,1},{1,0,1,1,1,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,1,1,1,1,0},{1,1,0,1,0,1,0,1,0,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,1,1,1,0,1,0,1,1,1,1,0,1,0,1,0,0,1,0,0,0,0,0,1},{0,1,0,0,1,1,1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,1,1,1,0,0,1,0,0},{1,0,0,0,1,0,1,0,1,1,1,0,1,0,1,0,0,1,1,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,1,0},{0,0,0,1,1,1,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,1,0,0,1,1,1,1},{1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,0,0},{1,0,1,1,1,0,1,0,1,0,1,0,0,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0},{0,0,0,0,1,1,0,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,0,1,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,0,1},{0,1,0,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0},{0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,1,0},{1,1,0,1,0,1,0,1,0,1,1,1,0,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,1,1,1,1,1},{1,1,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0},{0,1,1,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,0,0,1,0,0,1,0,1,1,1,0,1,0,1,1,1,1,1,1,0,1},{0,1,1,1,0,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,1,1,1,1},{0,0,1,0,0,1,1,1,0,0,1,1,0,0,0,1,1,0,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,1,1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0},{1,0,0,0,1,1,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,1},{0,0,0,0,0,1,1,0,1,0,0,0,0,0,1,1,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,1,1,0,0,1,1,0,0,0,0,0,1,0,0},{1,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,0,0,1,1,0,1},{1,1,0,0,1,1,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,0,1,0,1,1,0,1,1,1,0,0,0,0,0,0,1,0},{0,0,0,1,0,0,1,0,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,1},{0,1,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,1},{1,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,0,1,0,0,1,1,1,0,1,1,0,1,1,1,1,1,0,0,1,1,0,0}}));
    return 0;
}
/*
g++ -o MapOfHighestPeak1765 MapOfHighestPeak1765.cpp;./MapOfHighestPeak1765
*/
